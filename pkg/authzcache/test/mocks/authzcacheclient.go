// Code generated by protoc-gen-mocker. DO NOT EDIT.
// version: 1.0.0
// source: authzcache.proto

package mocks

import (
	"context"
	"errors"

	grpcauthzcv1 "github.com/descope/authzcache/pkg/authzcache/proto/v1"
	grpcauthzv1 "github.com/descope/authzservice/pkg/authzservice/proto/v1"
	grpc "google.golang.org/grpc"
)

type AuthzCacheClient struct {
	CreateFGASchemaFailure bool
	CreateFGASchemaError   error
	CreateFGASchemaCount   int
	CreateFGASchemaAssert  func(_ context.Context, req *grpcauthzv1.SaveDSLSchemaRequest, _ ...grpc.CallOption)

	CreateFGARelationsFailure bool
	CreateFGARelationsError   error
	CreateFGARelationsCount   int
	CreateFGARelationsAssert  func(_ context.Context, req *grpcauthzv1.CreateTuplesRequest, _ ...grpc.CallOption)

	DeleteFGARelationsFailure bool
	DeleteFGARelationsError   error
	DeleteFGARelationsCount   int
	DeleteFGARelationsAssert  func(_ context.Context, req *grpcauthzv1.DeleteTuplesRequest, _ ...grpc.CallOption)

	CheckFailure  bool
	CheckError    error
	CheckCount    int
	CheckAssert   func(_ context.Context, req *grpcauthzv1.CheckRequest, _ ...grpc.CallOption)
	CheckResponse *grpcauthzv1.CheckResponse
}

func (c *AuthzCacheClient) ResetMock() *AuthzCacheClient {
	*c = AuthzCacheClient{}
	return c
}

func (c *AuthzCacheClient) CreateFGASchema(ctx context.Context, req *grpcauthzv1.SaveDSLSchemaRequest, opts ...grpc.CallOption) (*grpcauthzv1.SaveDSLSchemaResponse, error) {
	c.CreateFGASchemaCount++
	if c.CreateFGASchemaAssert != nil {
		c.CreateFGASchemaAssert(ctx, req, opts...)
	}
	if c.CreateFGASchemaError != nil {
		return nil, c.CreateFGASchemaError
	}
	if c.CreateFGASchemaFailure {
		return nil, ErrAuthzcacheMock
	}
	return &grpcauthzv1.SaveDSLSchemaResponse{}, nil
}

func (c *AuthzCacheClient) CreateFGARelations(ctx context.Context, req *grpcauthzv1.CreateTuplesRequest, opts ...grpc.CallOption) (*grpcauthzv1.CreateTuplesResponse, error) {
	c.CreateFGARelationsCount++
	if c.CreateFGARelationsAssert != nil {
		c.CreateFGARelationsAssert(ctx, req, opts...)
	}
	if c.CreateFGARelationsError != nil {
		return nil, c.CreateFGARelationsError
	}
	if c.CreateFGARelationsFailure {
		return nil, ErrAuthzcacheMock
	}
	return &grpcauthzv1.CreateTuplesResponse{}, nil
}

func (c *AuthzCacheClient) DeleteFGARelations(ctx context.Context, req *grpcauthzv1.DeleteTuplesRequest, opts ...grpc.CallOption) (*grpcauthzv1.DeleteTuplesResponse, error) {
	c.DeleteFGARelationsCount++
	if c.DeleteFGARelationsAssert != nil {
		c.DeleteFGARelationsAssert(ctx, req, opts...)
	}
	if c.DeleteFGARelationsError != nil {
		return nil, c.DeleteFGARelationsError
	}
	if c.DeleteFGARelationsFailure {
		return nil, ErrAuthzcacheMock
	}
	return &grpcauthzv1.DeleteTuplesResponse{}, nil
}

func (c *AuthzCacheClient) Check(ctx context.Context, req *grpcauthzv1.CheckRequest, opts ...grpc.CallOption) (*grpcauthzv1.CheckResponse, error) {
	c.CheckCount++
	if c.CheckAssert != nil {
		c.CheckAssert(ctx, req, opts...)
	}
	if c.CheckError != nil {
		return nil, c.CheckError
	}
	if c.CheckFailure {
		return nil, ErrAuthzcacheMock
	}
	if c.CheckResponse != nil {
		return c.CheckResponse, nil
	}
	return &grpcauthzv1.CheckResponse{}, nil
}

// Ensures that all service methods defined in the AuthzCacheClient interface
// are implemented by the mock implementation in this file
var _ grpcauthzcv1.AuthzCacheClient = (*AuthzCacheClient)(nil)

// A generic error that's returned when a method's Failure field
// is set to true and the Error field is not set
var ErrAuthzcacheMock = errors.New("generic error for testing") // nolint:forbidigo

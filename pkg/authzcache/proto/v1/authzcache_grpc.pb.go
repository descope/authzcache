// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: authzcache.proto

package v1

import (
	context "context"
	v1 "github.com/descope/authzservice/pkg/authzservice/proto/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthzCache_CreateFGASchema_FullMethodName    = "/authzcv1.AuthzCache/CreateFGASchema"
	AuthzCache_CreateFGARelations_FullMethodName = "/authzcv1.AuthzCache/CreateFGARelations"
	AuthzCache_DeleteFGARelations_FullMethodName = "/authzcv1.AuthzCache/DeleteFGARelations"
	AuthzCache_Check_FullMethodName              = "/authzcv1.AuthzCache/Check"
)

// AuthzCacheClient is the client API for AuthzCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthzCacheClient interface {
	CreateFGASchema(ctx context.Context, in *v1.SaveDSLSchemaRequest, opts ...grpc.CallOption) (*v1.SaveDSLSchemaResponse, error)
	CreateFGARelations(ctx context.Context, in *v1.CreateTuplesRequest, opts ...grpc.CallOption) (*v1.CreateTuplesResponse, error)
	DeleteFGARelations(ctx context.Context, in *v1.DeleteTuplesRequest, opts ...grpc.CallOption) (*v1.DeleteTuplesResponse, error)
	Check(ctx context.Context, in *v1.CheckRequest, opts ...grpc.CallOption) (*v1.CheckResponse, error)
}

type authzCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthzCacheClient(cc grpc.ClientConnInterface) AuthzCacheClient {
	return &authzCacheClient{cc}
}

func (c *authzCacheClient) CreateFGASchema(ctx context.Context, in *v1.SaveDSLSchemaRequest, opts ...grpc.CallOption) (*v1.SaveDSLSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.SaveDSLSchemaResponse)
	err := c.cc.Invoke(ctx, AuthzCache_CreateFGASchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzCacheClient) CreateFGARelations(ctx context.Context, in *v1.CreateTuplesRequest, opts ...grpc.CallOption) (*v1.CreateTuplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateTuplesResponse)
	err := c.cc.Invoke(ctx, AuthzCache_CreateFGARelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzCacheClient) DeleteFGARelations(ctx context.Context, in *v1.DeleteTuplesRequest, opts ...grpc.CallOption) (*v1.DeleteTuplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteTuplesResponse)
	err := c.cc.Invoke(ctx, AuthzCache_DeleteFGARelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzCacheClient) Check(ctx context.Context, in *v1.CheckRequest, opts ...grpc.CallOption) (*v1.CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CheckResponse)
	err := c.cc.Invoke(ctx, AuthzCache_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthzCacheServer is the server API for AuthzCache service.
// All implementations must embed UnimplementedAuthzCacheServer
// for forward compatibility.
type AuthzCacheServer interface {
	CreateFGASchema(context.Context, *v1.SaveDSLSchemaRequest) (*v1.SaveDSLSchemaResponse, error)
	CreateFGARelations(context.Context, *v1.CreateTuplesRequest) (*v1.CreateTuplesResponse, error)
	DeleteFGARelations(context.Context, *v1.DeleteTuplesRequest) (*v1.DeleteTuplesResponse, error)
	Check(context.Context, *v1.CheckRequest) (*v1.CheckResponse, error)
	mustEmbedUnimplementedAuthzCacheServer()
}

// UnimplementedAuthzCacheServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthzCacheServer struct{}

func (UnimplementedAuthzCacheServer) CreateFGASchema(context.Context, *v1.SaveDSLSchemaRequest) (*v1.SaveDSLSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFGASchema not implemented")
}
func (UnimplementedAuthzCacheServer) CreateFGARelations(context.Context, *v1.CreateTuplesRequest) (*v1.CreateTuplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFGARelations not implemented")
}
func (UnimplementedAuthzCacheServer) DeleteFGARelations(context.Context, *v1.DeleteTuplesRequest) (*v1.DeleteTuplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFGARelations not implemented")
}
func (UnimplementedAuthzCacheServer) Check(context.Context, *v1.CheckRequest) (*v1.CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAuthzCacheServer) mustEmbedUnimplementedAuthzCacheServer() {}
func (UnimplementedAuthzCacheServer) testEmbeddedByValue()                    {}

// UnsafeAuthzCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthzCacheServer will
// result in compilation errors.
type UnsafeAuthzCacheServer interface {
	mustEmbedUnimplementedAuthzCacheServer()
}

func RegisterAuthzCacheServer(s grpc.ServiceRegistrar, srv AuthzCacheServer) {
	// If the following call pancis, it indicates UnimplementedAuthzCacheServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthzCache_ServiceDesc, srv)
}

func _AuthzCache_CreateFGASchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SaveDSLSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzCacheServer).CreateFGASchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzCache_CreateFGASchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzCacheServer).CreateFGASchema(ctx, req.(*v1.SaveDSLSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzCache_CreateFGARelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateTuplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzCacheServer).CreateFGARelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzCache_CreateFGARelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzCacheServer).CreateFGARelations(ctx, req.(*v1.CreateTuplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzCache_DeleteFGARelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteTuplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzCacheServer).DeleteFGARelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzCache_DeleteFGARelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzCacheServer).DeleteFGARelations(ctx, req.(*v1.DeleteTuplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzCache_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzCacheServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthzCache_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzCacheServer).Check(ctx, req.(*v1.CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthzCache_ServiceDesc is the grpc.ServiceDesc for AuthzCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthzCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzcv1.AuthzCache",
	HandlerType: (*AuthzCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFGASchema",
			Handler:    _AuthzCache_CreateFGASchema_Handler,
		},
		{
			MethodName: "CreateFGARelations",
			Handler:    _AuthzCache_CreateFGARelations_Handler,
		},
		{
			MethodName: "DeleteFGARelations",
			Handler:    _AuthzCache_DeleteFGARelations_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _AuthzCache_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authzcache.proto",
}
